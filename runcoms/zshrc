#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Modified by leo.
#

# Source Prezto.

if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Needed for gnome terminal to work.
export TERM=xterm-256color

# z - jump around
. ~/dotfiles/bin/z.sh

# Python
export PYTHONPATH=$HOME/code/python:$PYTHONPATH

# Go Language
GODEV=$HOME/code/go # Go std dirs {src, bin, pkg} go here.
export GOPATH=$GODEV #:$G4 # List all the workspaces.
export PATH=/usr/local/go/bin:$GODEV/bin:$PATH # Find the executables.

# Run local godoc.
alias lgodoc='godoc -http=":6060" -play=true'
alias gopkg='open http://localhost:6060/pkg/?m=flat'

# Go OS-indep bash completion.
x=$(go env | grep GOROOT | gawk -F "\"" '{print $2}') # get GOROOT
if [ -d "$x/misc/bash/go" ]; then
  source $x/misc/bash/go
fi

# Appengine / Go
export PATH=$PATH:$HOME/Packages/go_appengine

# Some additional paths.
export PATH=.:$HOME/bin:$HOME/scripts:$HOME/dotfiles/bin:/usr/local/bin:$PATH

# Servers
alias monster="ssh monster -t tmux a"

### GCLOUD

# Python3 is not supported. Arch Linux default is python3.
PYTHON_VER=$(python -c 'import sys; print(sys.version_info[0])')
if [ $PYTHON_VER = "3" ]; then
    PYTHON2="/usr/bin/python2"
    if [ -e $PYTHON2 ]; then
       export CLOUDSDK_PYTHON=$PYTHON2
    fi
fi

# The next line updates PATH for the Google Cloud SDK.
if [[ -d $HOME/google-cloud-sdk ]]; then
    source $HOME/google-cloud-sdk/path.zsh.inc
    source $HOME/google-cloud-sdk/completion.zsh.inc
fi

# GCloud
alias gdisks="gcloud compute disks list --format json | jq '. | .[].name'"
alias snap="gcloud compute disks snapshot"

# Extract from most common files.
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# Read local startup script.
if [[ -f $HOME/.zshrc_local ]]; then
    source $HOME/.zshrc_local
fi
